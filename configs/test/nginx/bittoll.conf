
server {
    listen  [::]:80 default_server;

    server_name us.bittoll.com;

    location = /long-polling-raw {
        limit_except POST GET {
            deny all;
        }
        rewrite      /long-polling-raw /long-polling break;
        proxy_pass          http://localhost:19332;
        proxy_method        GET;
        proxy_hide_header   X-Roll-Ntime;
        proxy_hide_header   X-Long-Polling;
        proxy_hide_header   X-Is-P2pool;
        proxy_hide_header   X-Stratum;
        proxy_hide_header   Server;
        add_header          X-Long-Polling  /long-polling;
        proxy_pass_request_headers  off;
        proxy_pass_request_body     on;
        proxy_read_timeout          1200;

    }

    location = /long-polling {
        default_type        'application/json';
        add_header          X-Long-Polling  /long-polling;
        content_by_lua '
            local redis = require "resty.redis"
            local string = require "string"
            local red = redis:new()
            local ok, err = red:connect("127.0.0.1", 6379)
            if not ok then
                ngx.say("failed to connect: ", err)
                return
            end
            local cjson = require "cjson"

            local res = ngx.location.capture("/long-polling-raw")
            ngx.status = res.status
            ngx.say(res.body)

            local body = cjson.decode(res.body)
            local target = body["result"]["target"]
            local merkle = string.sub(body["result"]["data"], 73, 64 + 72)
            local ok, err = red:hset("m:" .. merkle, "diff", target)

            if not ok then
                ngx.say("failed to hset: ", err)
                return
            end
        ';
    }

    location / {
        limit_except POST {
            deny all;
        }
        proxy_pass          http://localhost:3000;
        add_header          X-Long-Polling  /long-polling;
    }
}
